/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef center_TYPES_H
#define center_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace center {

class MonitorInfo;

typedef struct _MonitorInfo__isset {
  _MonitorInfo__isset() : m_monitor_id(false), m_ip(false), m_usage_ratio(false) {}
  bool m_monitor_id :1;
  bool m_ip :1;
  bool m_usage_ratio :1;
} _MonitorInfo__isset;

class MonitorInfo {
 public:

  MonitorInfo(const MonitorInfo&);
  MonitorInfo& operator=(const MonitorInfo&);
  MonitorInfo() : m_monitor_id(0), m_ip(), m_usage_ratio(0) {
  }

  virtual ~MonitorInfo() throw();
  int32_t m_monitor_id;
  std::string m_ip;
  double m_usage_ratio;

  _MonitorInfo__isset __isset;

  void __set_m_monitor_id(const int32_t val);

  void __set_m_ip(const std::string& val);

  void __set_m_usage_ratio(const double val);

  bool operator == (const MonitorInfo & rhs) const
  {
    if (!(m_monitor_id == rhs.m_monitor_id))
      return false;
    if (!(m_ip == rhs.m_ip))
      return false;
    if (!(m_usage_ratio == rhs.m_usage_ratio))
      return false;
    return true;
  }
  bool operator != (const MonitorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MonitorInfo &a, MonitorInfo &b);

inline std::ostream& operator<<(std::ostream& out, const MonitorInfo& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
